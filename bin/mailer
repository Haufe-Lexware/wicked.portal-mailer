#!/usr/bin/env node

'use strict';

/**
 * Module dependencies.
 */

var app = require('../app');
var mailer = require('../mailer');
var debug = require('debug')('portal-mailer:main');
var http = require('http');
var nodeMailer = require('nodemailer');

var envReader = require('portal-env');

console.log("Portal Mailer environment: " + app.get('env'));

var environment = app.get('env');
if (!environment)
    throw new Error('Environment variable NODE_ENV must be set.');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3003');
app.set('port', port);

var apiUrl = envReader.resolveApiUrl();
app.set('api_url', apiUrl);

var myUrl = process.env.PORTAL_MAILER_URL;
if (!myUrl) {
    myUrl = envReader.guessServiceUrl('portal-mailer', '3003');
    console.log('Environment variable PORTAL_MAILER_URL is not set, defaulting to ' + myUrl + '. If this is not correct, please set before starting this process.');
}
if (!myUrl.endsWith('/')) // Add a trailing slash here.
    myUrl = myUrl + '/';
app.set('my_url', myUrl);

// Create HTTP server.
var server = http.createServer(app);

// Listen on provided port, on all network interfaces.
server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

envReader.awaitUrl(apiUrl + 'ping', -1, 5000, function (err, result) {
    if (err) {
        debug('Failed waiting for API.');
        throw err;
    }
    mailer.init(app, function (err) {
        if (err) {
            console.error("Could not intialize the Portal Mailer.");
            throw err;
        }

        var mailerOptions = app.mailerGlobals.mailer;
        debug('mailerOptions:');
        debug(mailerOptions);

        var smtpHost = mailerOptions.smtpHost;

        var transportOptions = {
            host: mailerOptions.smtpHost
        };

        if (!mailerOptions.anonymous) {
            transportOptions.auth = {
                user: mailerOptions.username,
                pass: mailerOptions.password
            };
        }

        if (mailerOptions.smtpPort)
            transportOptions.port = mailerOptions.smtpPort;
        else
            transportOptions.port = 465; // smtps

        if (mailerOptions.forceSecure) {
            transportOptions.secure = true;
        } else {
            transportOptions.secure = false;
            transportOptions.tls = {
                rejectUnauthorized: false
            };
        }

        debug('transportOptions:');
        debug(transportOptions);

        // Configure nodemailer
        mailer.smtpTransporter = nodeMailer.createTransport(transportOptions);

        // Graceful shutdown
        process.on('SIGINT', function () {
            console.log("Attempting unregistering from portal API.");
            mailer.deinit(app, function (err) {
                process.exit();
            });
        });

        debug('Mailer initialized');
        app.initialized = true;
    });
});

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
    var port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    var bind = typeof port === 'string' ?
        'Pipe ' + port :
        'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
    var addr = server.address();
    var bind = typeof addr === 'string' ?
        'pipe ' + addr :
        'port ' + addr.port;
    debug('Listening on ' + bind);
}
